{
  "language": "Solidity",
  "sources": {
    "contracts/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\n/// @notice Gas efficient ERC20 to explore alternative currency designs\n/// @author Modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @author Modified for this use by stripping all transfer and approval logic + associated events.\ncontract ERC20 {\n    /*///////////////////////////////////////////////////////////////\n                                  EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address from, address to, uint256 amount);\n\n    /*///////////////////////////////////////////////////////////////\n                             METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    /*///////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                    INTERNAL PROMISE/FORGIVE LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}"
    },
    "contracts/Honour.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"./ERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract Honour is ERC20, ReentrancyGuard {\n\n    event Proposed(address indexed proposer, address indexed receiver, uint256 proposalId, uint256 amount);\n    event Honoured(address indexed proposer, address indexed receiver, uint256 proposalId, uint256 amount);\n    event Forgiven(address indexed forgiver, address indexed forgiven, uint256 forgivingId, uint256 amount);\n    event Accepted(address indexed forgiver, address indexed forgiven, uint256 forgivingId, uint256 amount);\n\n    error Unbalanced(string message);\n\n    ERC20 public reserve;\n\n    // Storage mappings for proposals and forgiveness.\n    // This multiply nested mapping may seem unnecessary, but we need the address\n    // of both parties to create trust graphs of more than depth 1, and we need the\n    // unique ID in the UI to filter propose and forgive by those which have already\n    // been honoured or accepted\n    mapping(address => mapping(address => mapping(uint256 => uint256))) private proposal;\n    mapping(address => mapping(address => mapping(uint256 => uint256))) private forgiving;\n\n    uint256 proposalId;\n    uint256 forgivingId;\n\n    constructor(address _reserve) ERC20(\"HONOUR\", \"HON\", 18) {\n        reserve = ERC20(_reserve);\n    }\n\n    /**\n     * @notice begin the process of creating HON by setting the amount and address it should be added to\n     * @param  receiver the address who is set to take on the HON once created\n     * @param  amount the amount of HON to be created once it is honoured into existence.\n     */\n    function propose(address receiver, uint256 amount)\n        public\n    {\n        require (msg.sender != receiver, \"Can't propose to self\");\n        require (amount > 0, \"Propose more than 0\");\n        proposalId++;\n        proposal[msg.sender][receiver][proposalId] += amount;\n        emit Proposed(msg.sender, receiver, proposalId, amount);\n    }\n\n    /**\n     * @notice create HON by accepting the amount set in propose()\n     * @param proposer  the address whose proposal is being honoured\n     * @param id        the unique ID of the proposal being honoured\n     */\n    function honour(address proposer, uint256 id)\n        public\n        nonReentrant\n    {\n        require(proposal[proposer][msg.sender][id] > 0, \"Nothing to honour\");\n        uint256 amount = proposal[proposer][msg.sender][id];\n        _mint(msg.sender, amount);\n        proposal[proposer][msg.sender][id] = 0;\n        emit Honoured(proposer, msg.sender, id, amount);\n    }\n\n    /**\n     * @notice begin the process of erasing HON by setting the amount and address it should be removed from\n     * @param  forgiven the address to be forgiven\n     * @param  amount the amount to forgive\n     */\n    function forgive(address forgiven, uint256 amount)\n        public\n    {\n        require(msg.sender != forgiven, \"Can't forgive self\");\n        require (amount > 0, \"Forgive more than 0\");\n        // you can't forgive more than your current balance, nor can you forgive more than\n        // the current balance of the person you are forgiving\n        if(balanceOf[msg.sender] < amount || balanceOf[forgiven] < amount) {\n            revert Unbalanced(\"Unmatched balances\");\n        }\n        forgivingId++;\n        forgiving[msg.sender][forgiven][forgivingId] += amount;\n        emit Forgiven(msg.sender, forgiven, forgivingId, amount);\n    }\n\n    /**\n     * @notice erase HON by accepting the amount set in forgive()\n     * @param forgiver  the address whose forgiveness is being accepted\n     * @param id        the unique ID of the forgiveness being accepted\n     */\n    function accept(address forgiver, uint256 id)\n        public\n        nonReentrant\n    {\n        require(forgiving[forgiver][msg.sender][id] > 0, \"Nothing to accept\");\n        uint256 amount = forgiving[forgiver][msg.sender][id];\n        _burn(msg.sender, amount);\n        forgiving[forgiver][msg.sender][id] = 0;\n        emit Accepted(forgiver, msg.sender, id, amount);\n    }\n}"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}